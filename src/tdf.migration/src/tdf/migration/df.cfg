[transmogrifier]
pipeline =
    catalogsource
    path_manipulator_projects
    path_manipulator_releases
#    modifypath_templates
    convertpscproject
    convertpscrelease
    fieldscorrector
    setuuid
    fieldscorrector
#    printer
    folders
    constructor
    schemaupdater
    datafields
    workflowupdater
    lefovers
    properties
#    browser-default
    owner
    local_roles
    releasefile2fields
    reindexobject
    logger
# printer

[catalogsource]
blueprint = ploneorg.migration.catalogsource
remote-url = http://localhost:9088
remote-username = sneridagh
remote-password = 1
remote-root = /LibreOffice-Templates
catalog-path = /LibreOffice-Templates/portal_catalog
catalog-query = {'path': {'query': '/LibreOffice-Templates/template-center'}, 'portal_type': ['PSCProject', 'PSCRelease']}
# catalog-query = {'path': {'query': '/LibreOffice-Templates/template-center/1cm-squared-paper'}, 'portal_type': ['PSCProject', 'PSCRelease']}
# {'path': {'query': '/plone.org/events'}}
# {'path': {'query': '/plone.org/news'}}
# {'path': {'query': '/plone.org/foundation'}}
# {'path': {'query': '/plone.org/foundation/members'}}
remote-skip-paths =
#    /foundation/members

[path_manipulator_projects]
blueprint = ploneorg.migration.pathmanipulator
key = string:_type
template = string:/templates/=
# template = string:/templates/=/*/=
condition = python:item['_type'] == 'PSCProject'

[path_manipulator_releases]
blueprint = ploneorg.migration.pathmanipulator
key = string:_type
template = string:/templates/=//=
# template = string:/templates/=/*/=
condition = python:item['_type'] == 'PSCRelease'

[modifypath_templates]
blueprint = collective.transmogrifier.sections.inserter
key = string:_path
value = python: item['_path'].replace('template-center', 'templates') if '/template-center/' in item['_path'] else item['_path']

[convertpscproject]
blueprint = collective.transmogrifier.sections.inserter
key = string:_type
value = string:tdf.templateuploadcenter.tupproject
condition = python:item['_type'] == 'PSCProject'

[convertpscrelease]
blueprint = collective.transmogrifier.sections.inserter
key = string:_type
value = string:tdf.templateuploadcenter.tuprelease
condition = python:item['_type'] == 'PSCRelease'

[releasefile2fields]
blueprint = tdf.migration.releasefile2fields
remote-url = ${catalogsource:remote-url}
remote-username = ${catalogsource:remote-username}
remote-password = ${catalogsource:remote-password}
remote-root = ${catalogsource:remote-root}
catalog-path = ${catalogsource:catalog-path}

[setuuid]
blueprint = collective.transmogrifier.sections.manipulator
keys = _uid
destination = string:plone.uuid

[fieldscorrector]
blueprint = ploneorg.migration.fieldscorrector

[folders]
blueprint = collective.transmogrifier.sections.folders

[constructor]
blueprint = collective.transmogrifier.sections.constructor

[schemaupdater]
blueprint = ploneorg.migration.schemaupdater

[datafields]
blueprint = ploneorg.migration.sections.datafields

[workflowupdater]
blueprint = ploneorg.migration.sections.workflowupdater

[lefovers]
blueprint = ploneorg.migration.leftovers

[properties]
blueprint = collective.jsonmigrator.properties

[browser-default]
blueprint = plone.app.transmogrifier.browserdefault

[owner]
blueprint = collective.jsonmigrator.owner

[local_roles]
blueprint = ploneorg.migration.localroles

[reindexobject]
blueprint = plone.app.transmogrifier.reindexobject

[logger]
blueprint = ploneorg.migration.logger
keys =
    _type
    _path

[printer]
blueprint = ploneorg.migration.sections.pprinter
